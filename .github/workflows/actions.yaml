name: Calico Enterprise Test Suite
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  call-inclusive-naming-check:
    name: Inclusive Naming
    uses: canonical-web-and-design/Inclusive-naming/.github/workflows/woke.yaml@main
    with:
      fail-on-error: "true"

  lint-unit:
    name: Lint Unit
    uses: charmed-kubernetes/workflows/.github/workflows/lint-unit.yaml@main
    with:
      python: "['3.8', '3.9', '3.10', '3.11']"
    needs: 
      - call-inclusive-naming-check

  integration-test:
    name: VSphere Integration Test
    needs: 
      - lint-unit
    runs-on: self-hosted
    env:
      JUJU_MODEL: calico-enterprise
      CHARM_TIGERA_EE_LICENSE: ${{ secrets.CHARM_TIGERA_EE_LICENSE }}
      CHARM_TIGERA_EE_REG_SECRET: ${{ secrets.CHARM_TIGERA_EE_REG_SECRET }}
      CREDENTIALS_YAML_CONTENT: ${{ secrets.CREDENTIALS_YAML }}
      CLOUDS_YAML_CONTENT: ${{ secrets.CLOUDS_YAML }}


    timeout-minutes: 90
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Install Terraform and Tools
        run: |-
          sudo snap install terraform --channel=latest/stable --classic
          sudo snap install yq --classic
          sudo apt install sshuttle -y
      - name: Generate SSH Keys
        run: |-
          ssh-keygen -b 2048 -t rsa -N "" -f ${HOME}/.ssh/id_rsa
          PRIVATE_KEY=${HOME}/.ssh/id_rsa
          PUBLIC_KEY=${HOME}/.ssh/id_rsa.pub

          echo "PRIVATE_KEY=${PRIVATE_KEY}" >> "$GITHUB_ENV"
          echo "PUBLIC_KEY=${PUBLIC_KEY}" >> "$GITHUB_ENV"

      - name: Apply cloud credentials
        run: |-
          CLOUD_CREDS=${HOME}/.cloud-creds
          CREDENTIALS_YAML=$CLOUD_CREDS/credentials.yaml
          CLOUDS_YAML=$CLOUD_CREDS/clouds.yaml
          mkdir -p $CLOUD_CREDS
          if [ -z "$CREDENTIALS_YAML_CONTENT" ]; then 
            >&2 echo "No cloud credentials available"
            exit -1
          fi
          if [ -z "$CLOUDS_YAML_CONTENT" ]; then 
            >&2 echo "No cloud yaml available"
            exit -1
          fi
          echo "${CREDENTIALS_YAML_CONTENT}" | base64 -d > $CREDENTIALS_YAML
          echo "${CLOUDS_YAML_CONTENT}" | base64 -d > $CLOUDS_YAML
          VSPHERE_USER=$(cat $CREDENTIALS_YAML | yq -r .credentials.vsphere.vsphere-crew.user)
          VSPHERE_ENDPOINT=$(cat $CLOUDS_YAML | yq -r .clouds.vsphere.endpoint)
          VSPHERE_PASS=$(cat $CREDENTIALS_YAML | yq -r .credentials.vsphere.vsphere-crew.password)
          VSPHERE_FOLDER=$(cat $CREDENTIALS_YAML | yq -r .credentials.vsphere.vsphere-crew.vmfolder)
          VSPHERE_FOLDER="${VSPHERE_FOLDER}/Calico Enterprise ($GITHUB_SHA)"

          if [ -z "$VSPHERE_ENDPOINT" ]; then 
            >&2 echo "No vsphere endpoint detected"
            exit -1
          fi
          if [ -z "$VSPHERE_USER" ]; then 
            >&2 echo "No vsphere user detected"
            exit -1
          fi
          if [ -z "$VSPHERE_PASS" ]; then 
            >&2 echo "No vsphere password detected"
            exit -1
          fi

          echo "VSPHERE_ENDPOINT=$VSPHERE_ENDPOINT" >> "$GITHUB_ENV"
          echo "VSPHERE_USER=$VSPHERE_USER" >> "$GITHUB_ENV"
          echo "VSPHERE_PASS=$VSPHERE_PASS" >> "$GITHUB_ENV"
          echo "VSPHERE_FOLDER=$VSPHERE_FOLDER" >> "$GITHUB_ENV"

      - name: Terraform Create Cloud
        run: |-
          terraform -chdir=tests/testing-environment/vmware init
          terraform -chdir=tests/testing-environment/vmware apply \
            -var="vsphere_user=${VSPHERE_USER}" \
            -var="vsphere_password=${VSPHERE_PASS}" \
            -var="vsphere_server=${VSPHERE_ENDPOINT}" \
            -var="vsphere_folder=${VSPHERE_FOLDER}" \
            -var="juju_authorized_key=$(cat ${PUBLIC_KEY})" \
            -var="tigera_registry_secret=${CHARM_TIGERA_EE_REG_SECRET}" \
            -auto-approve
          echo "Wait for Machines to fully cloud-init..."
          TOR1_IP=$(terraform -chdir=tests/testing-environment/vmware output -json | yq '.tor1.value')
          TOR2_IP=$(terraform -chdir=tests/testing-environment/vmware output -json | yq '.tor2.value')
          K8S_IPS=$(terraform -chdir=tests/testing-environment/vmware output -json | yq '.k8s_addresses.value | to_entries | .[].value')
          CONTROLLER_IP=$(terraform -chdir=tests/testing-environment/vmware output -json | yq '.controller.value')
          MANUAL_CLOUD_YAML=$(cat << EOF | base64 -w0
          clouds:
            manual-cloud:
              type: manual
              endpoint: ubuntu@${CONTROLLER_IP}
          EOF
          )
          ssh ubuntu@$CONTROLLER_IP -o "StrictHostKeyChecking no" -- 'hostname'

          echo "TOR1_IP=$TOR1_IP" >> "$GITHUB_ENV"
          echo "TOR2_IP=$TOR2_IP" >> "$GITHUB_ENV"
          echo "K8S_IPS=$K8S_IPS" >> "$GITHUB_ENV"
          echo "CONTROLLER_IP=$CONTROLLER_IP" >> "$GITHUB_ENV"
          echo "MANUAL_CLOUD_YAML=$MANUAL_CLOUD_YAML" >> "$GITHUB_ENV"

      - name: Setup operator environment
        uses: charmed-kubernetes/actions-operator@main
        with:
          provider: manual-cloud
          juju-channel: 3.1/stable
          credentials-yaml: ${{ secrets.CREDENTIALS_YAML }}
          clouds-yaml: ${{ env.MANUAL_CLOUD_YAML }}
          bootstrap-constraints: ""
          bootstrap-options: ""

      - name: Terraform Apply DualTor Machine Infra
        run: |-
          juju add-model ${JUJU_MODEL}
          juju add-space bgp
          juju add-space mgmt
          for addr in ${K8S_IPS}; do
            ssh ubuntu@$addr -o "StrictHostKeyChecking no" -- 'hostname'
            juju add-machine -m ${JUJU_MODEL} ssh:ubuntu@$addr
          done
          juju move-to-space bgp 10.30.30.12/32 10.30.30.13/32 10.30.30.15/32 10.30.30.16/32 10.30.30.17/32
          juju move-to-space mgmt 10.246.153.0/24
      - name: Run test
        run: tox -e integration -- --basetemp=/home/ubuntu/pytest
      - name: Setup Debug Artifact Collection
        if: ${{ failure() }}
        run: mkdir tmp
      - name: Collect Charmcraft Errors
        if: ${{ failure() }}
        run: |
          mv /home/ubuntu/.local/state/charmcraft/log/* tmp/ | true
      - name: Collect Juju Status
        if: ${{ failure() }}
        run: |
          juju status 2>&1 | tee tmp/juju-status.txt
          juju-crashdump -s -m controller -a debug-layer -a config -o tmp/
          mv juju-crashdump-* tmp/ | true
      - name: Upload debug artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: test-run-artifacts
          path: tmp
      - name: Juju Teardown
        if: ${{ always() }}
        run: |
          juju destroy-model ${JUJU_MODEL} --force --destroy-storage

      - name: Terraform Teardown
        if: ${{ always() }}
        run: |
          terraform -chdir=tests/testing-environment/vmware destroy \
            -var="vsphere_user=${VSPHERE_USER}" \
            -var="vsphere_password=${VSPHERE_PASS}" \
            -var="vsphere_server=${VSPHERE_ENDPOINT}" \
            -var="vsphere_folder=${VSPHERE_FOLDER}" \
            -var="juju_authorized_key=$(cat ${PUBLIC_KEY})" \
            -var="tigera_registry_secret=${CHARM_TIGERA_EE_REG_SECRET}" \
            -auto-approve
