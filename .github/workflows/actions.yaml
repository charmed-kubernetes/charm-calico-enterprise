name: Calico Enterprise Test Suite
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  call-inclusive-naming-check:
    name: Inclusive Naming
    uses: canonical-web-and-design/Inclusive-naming/.github/workflows/woke.yaml@main
    with:
      fail-on-error: "true"

  lint-unit:
    name: Lint Unit
    uses: charmed-kubernetes/workflows/.github/workflows/lint-unit.yaml@main
    with:
      python: "['3.8', '3.9', '3.10', '3.11']"
    needs: 
      - call-inclusive-naming-check

  integration-test:
    name: VSphere Integration Test
    needs: 
      - lint-unit
    runs-on: self-hosted
    env:
      JUJU_MODEL: tigera
    timeout-minutes: 90
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Setup operator environment
        uses: charmed-kubernetes/actions-operator@main
        with:
          provider: vsphere
          juju-channel: 3.1/stable
          credentials-yaml: ${{ secrets.CREDENTIALS_YAML }}
          clouds-yaml: ${{ secrets.CLOUDS_YAML }}
          bootstrap-constraints: "arch=amd64 cores=2 mem=4G"
          bootstrap-options: >-
            ${{ secrets.JAMMY_BOOTSTRAP_OPTIONS }}
            --model-default datastore=vsanDatastore
            --model-default primary-network=VLAN_2763
            --model-default force-vm-hardware-version=17
      - name: Terraform Apply DualTor Machine Infra
        run: |-
          sudo snap install terraform --channel=latest/stable --classic
          sudo snap install yq --classic
          juju add-model ${JUJU_MODEL}
          JUJU_CONTROLLER=$(juju controllers --format yaml | yq '.current-controller')
          JUJU_CONTROLLER_UUID=$(juju controllers --format yaml | yq ".controllers.${JUJU_CONTROLLER}.controller-uuid")
          VSPHERE_ENDPOINT=$(cat ~/.local/share/juju/clouds.yaml | yq -r '.clouds.vsphere.endpoint')
          VSPHERE_USER=$(cat ~/.local/share/juju/credentials.yaml | yq -r '.credentials.vsphere.vsphere-crew.user')
          VSPHERE_PASS=$(cat ~/.local/share/juju/credentials.yaml | yq -r '.credentials.vsphere.vsphere-crew.password')
          VSPHERE_FOLDER=$(cat ~/.local/share/juju/credentials.yaml | yq -r '.credentials.vsphere.vsphere-crew.vmfolder')
          VSPHERE_FOLDER="${VSPHERE_FOLDER}/Juju Controller (${JUJU_CONTROLLER_UUID})/manual-machines"
          terraform -chdir=tests/testing-environment/vmware init
          terraform -chdir=tests/testing-environment/vmware apply \
            -var="vsphere_user=${VSPHERE_USER}" \
            -var="vsphere_password=${VSPHERE_PASS}" \
            -var="vsphere_server=${VSPHERE_ENDPOINT}" \
            -var="vsphere_folder=${VSPHERE_FOLDER}" \
            -var="juju_authorized_key=$(cat ~/.local/share/juju/ssh/juju_id_rsa.pub)" \
            -auto-approve
          for addr in $(terraform -chdir=tests/testing-environment/vmware output -json | yq '.k8s_addresses.value | to_entries | .[].value'); do
            ssh ubuntu@$addr -i ~/.local/share/juju/ssh/juju_id_rsa -o "StrictHostKeyChecking no" -- hostname
            juju add-machine -m ${JUJU_MODEL} ssh:ubuntu@$addr --public-key=~/.local/share/juju/ssh/juju_id_rsa.pub
          done
      - name: Run test
        run: tox -e integration -- --basetemp=/home/ubuntu/pytest
      - name: Setup Debug Artifact Collection
        if: ${{ failure() }}
        run: mkdir tmp
      - name: Collect Charmcraft Errors
        if: ${{ failure() }}
        run: |
          mv /home/ubuntu/.local/state/charmcraft/log/* tmp/ | true
      - name: Collect Juju Status
        if: ${{ failure() }}
        run: |
          juju status 2>&1 | tee tmp/juju-status.txt
          juju-crashdump -s -m controller -a debug-layer -a config -o tmp/
          mv juju-crashdump-* tmp/ | true
      - name: Upload debug artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: test-run-artifacts
          path: tmp
